# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."gha-runner-tuatmcc-wand-worker" = {
    image = "myoung34/github-runner:latest";
    environmentFiles = [
      "/etc/github_runners_tuatmcc_wand_env"
    ];
    volumes = [
      "/runner/data:/runner/data:rw"
      "/tmp/runner:/tmp/runner:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=worker"
      "--network=gha-runner-tuatmcc-wand_default"
      "--security-opt=label:disable"
    ];
  };
  systemd.services."docker-gha-runner-tuatmcc-wand-worker" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-gha-runner-tuatmcc-wand_default.service"
    ];
    requires = [
      "docker-network-gha-runner-tuatmcc-wand_default.service"
    ];
    partOf = [
      "docker-compose-gha-runner-tuatmcc-wand-root.target"
    ];
    wantedBy = [
      "docker-compose-gha-runner-tuatmcc-wand-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-gha-runner-tuatmcc-wand_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f gha-runner-tuatmcc-wand_default";
    };
    script = ''
      docker network inspect gha-runner-tuatmcc-wand_default || docker network create gha-runner-tuatmcc-wand_default
    '';
    partOf = [ "docker-compose-gha-runner-tuatmcc-wand-root.target" ];
    wantedBy = [ "docker-compose-gha-runner-tuatmcc-wand-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-gha-runner-tuatmcc-wand-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
