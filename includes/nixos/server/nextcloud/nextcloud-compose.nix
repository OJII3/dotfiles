# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."nextcloud-app" = {
    image = "nextcloud";
    environment = {
      "MYSQL_DATABASE" = "nextcloud";
      "MYSQL_HOST" = "db";
      "MYSQL_PASSWORD" = "strong_db_pass";
      "MYSQL_USER" = "nextcloud";
    };
    volumes = [
      "nextcloud_nextcloud_data:/var/www/html:rw"
    ];
    ports = [
      "8080:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=app"
      "--network=nextcloud_default"
    ];
  };
  systemd.services."docker-nextcloud-app" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nextcloud_default.service"
      "docker-volume-nextcloud_nextcloud_data.service"
    ];
    requires = [
      "docker-network-nextcloud_default.service"
      "docker-volume-nextcloud_nextcloud_data.service"
    ];
    partOf = [
      "docker-compose-nextcloud-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-root.target"
    ];
  };
  virtualisation.oci-containers.containers."nextcloud-db" = {
    image = "mariadb";
    environment = {
      "MYSQL_DATABASE" = "nextcloud";
      "MYSQL_PASSWORD" = "strong_db_pass";
      "MYSQL_ROOT_PASSWORD" = "strong_root_pass";
      "MYSQL_USER" = "nextcloud";
    };
    volumes = [
      "nextcloud_db_data:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=nextcloud_default"
    ];
  };
  systemd.services."docker-nextcloud-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nextcloud_default.service"
      "docker-volume-nextcloud_db_data.service"
    ];
    requires = [
      "docker-network-nextcloud_default.service"
      "docker-volume-nextcloud_db_data.service"
    ];
    partOf = [
      "docker-compose-nextcloud-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-nextcloud_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f nextcloud_default";
    };
    script = ''
      docker network inspect nextcloud_default || docker network create nextcloud_default
    '';
    partOf = [ "docker-compose-nextcloud-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-nextcloud_db_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect nextcloud_db_data || docker volume create nextcloud_db_data
    '';
    partOf = [ "docker-compose-nextcloud-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-root.target" ];
  };
  systemd.services."docker-volume-nextcloud_nextcloud_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect nextcloud_nextcloud_data || docker volume create nextcloud_nextcloud_data
    '';
    partOf = [ "docker-compose-nextcloud-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-nextcloud-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
